* Objects and Classes
** Why use classes
- We want to reuse as much code as possible
- We are better at thinking in terms of objects than in what the computer does
- We want our code organised.

** We will be making a bouncing ball program, a ball that bounces around the screen like
** an old screensaver

** Step 1. Add basic functions
void setup(){
  size(500, 500);
  background(255);
}

void draw(){
}

** Step 2. Add the class
*** Add this class to the top of your page(before setup)
*** Make it a capital B for Ball so we can tell that all capitalised things are classes.

class Ball{
}

*** The class is the INSTRUCTIONS we give to make the ball, not the ball itself.
*** Each ball will be an OBJECT

** Step 3. Give your class some data.

*** Let's think OBJECTIVELY. When designing a class to build objects, our first step is thinking about
*** what the object HAS.
*** These are usually things that can be counted or measured.
*** A real ball in the real world  HAS a position, it HAS a colour, etc.
*** Start with adding a few.

class Ball{
  int x;
  int y;
  int size;
}

** Step 4. Consructor

*** Let's add a nice way of creating balls by adding a constructor. This will allow us to give
*** Each and every ball we create a different size, position, whatever we want!

class Ball{
  int x;
  int y;
  int size;

  Ball(int px, int py, int psize){
    this.x = px;
    this.y = py;
    this.size = psize;
  }
}

*** NOTICE! All the data we gave the class (x, y, size) can be set to something different
*** by the constructor.

** step 4. Give your class some functionality

*** Now let's think about what an object DOES. A ball bounces, it moves, it HURTS when it hits you.
*** Converting this information to code is easy with classes! Let's make the ball just show up first.

class Ball{
  int x;
  int y;
  int size;

  Ball(int px, int py, int psize){
    this.x = px;
    this.y = py;
    this.size = psize;
  }

  void display(){
    circle(x, y, size);
  }
}

** Step 5. Use the class to create objects

class Ball{
  int x;
  int y;
  int size;

  Ball(int x, int y, int size){
    this.x = x;
    this.y = y;
    this.size = size;
  }

  void display(){
    circle(x, y, size);
  }
}

//Adding balls here
Ball b1;
Ball b2;
Ball b3;

*** After the class, add some balls. These are NOT inside a function or inside the class.
*** This tells the computer "Make Some room, I'm going to be making objects!"


** Step 6. Modify Setup

void setup(){
  size(500,500);
  background(255);

  //Setting the ball objects
  b1 = new Ball(50,50,50);
  b2 = new Ball(60,60,60);
  b3 = new Ball(70,70,70);
}

*** we now use the CONSTRUCTOR we designed earlier to create the balls, we can give them all
*** Their own positions and sizes.

** Step 7. modify draw
void draw(){
  b1.display();
  b2.display();
  b3.display();
}

*** Remember we gave the ball a display function. We can now call that and display each one. 
*** In the next step we will really see the benefit of using this style of coding.

** Step 8. Give the balls more data
class Ball{
  int x;
  int y;
  int size;
  int xspeed;
  int yspeed;


** step 9. Give the balls another function they can perform and add speed to constructor
*** makes sure to give each ball a speed variable in the "new ball" part of setup();

class Ball{
  int x;
  int y;
  int size;
   
  Ball(int x, int y, int size, int xspeed){
    this.x = x;
    this.y = y;
    this.size = size;
    this.xspeed = xspeed;
  }
  
  void display(){
    circle(x, y, size);
  }

  void move(){
    if(x > width){
      xspeed = -xspeed;
    }
    if(x < 0){
      xspeed = -xspeed;
    }

    x = x + xspeed;
}

void setup(){
  size(500,500);
  background(255);
  b1 = new Ball(70,70,70,1);
  b2 = new Ball(60,60,60,2);
  b3 = new Ball(50,50,50,3);
}

void draw(){
  b1.display();
  b1.move();
  b2.display();
  b2.move();
  b3.display();
  b3.move();
}

** step 10. adding more functionality

class Ball{
  int x;
  int y;
  int size;
  int xspeed;
  int yspeed;
  
  
  Ball(int x, int y, int size, int xspeed, int yspeed){
    this.x = x;
    this.y = y;
    this.size = size;
    this.xspeed = xspeed;
    this.yspeed = yspeed;
  }
  
  void display(){
    circle(x, y, size);
  }
  
  void move(){
    if(x > width){
      xspeed = -xspeed;
    }
    if(x < 0){
      xspeed = -xspeed;
    }
    x = x + xspeed;
    
    if(y > height){
      yspeed = -yspeed;
    }
    
    if(y < 0){
      yspeed = -yspeed;
    }
    
    y = y + yspeed;
    
    
  }
}

Ball b1;
Ball b2;
Ball b3;

void setup(){
  size(500,500);
  background(255);
  b1 = new Ball(0, 60, 100, 1, 5);
  b2 = new Ball(50, 120, 100, 1, 4);
  b3 = new Ball(100, 180, 100, 1, 3);
}

void draw(){
 b1.display();
 b1.move();
 b2.display();
 b2.move();
 b3.display();
 b3.move();
}

*** We now have a program that we can modify very easily by changing the variables in the
*** void setup() function. try and change speeds and sizes

#+OPTIONS: \n:t
